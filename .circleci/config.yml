version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: destroy_environments
          when: on_fail
          command: |
             # Use the AWS CLI to delete the CloudFormation stacks
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              # exit 1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Build-front-end"
          command: |
             cd frontend
             npm i
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Back-end-build"
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: "Run-frontend-test"
         command: |
             cd frontend
             npm install
             npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Run-Back-end-test"
          command: |
             cd backend
             npm install
             npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: "Run-frontend-scan"
         command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force 
            npm audit fix --force   
            npm audit --audit-level=critical       

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Run-Back-end-scan"
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            cat .circleci/ansible/inventory.txt
            ls ~/project/.circleci/ansible/
            cat ~/project/.circleci/ansible/inventory.txt
            yum -y install tar gzip jq npm
      - run:
          name: "Ensure-back-end-infrastructure-exists"
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              # exit 1
      - run:
          name: "Ensure-front-end-infrastructure-exist"
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              # exit 1
      - run:
          name: "Add-back-end-ip-to-ansible-inventory "
          command: |
            # Fetch the public IP of the EC2 instance
            #  "Name=tag:project,Values=udapeople"
            EC2_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

            # Append the IP to the inventory.txt file
            echo $EC2_PUBLIC_IP >> ~/project/.circleci/ansible/inventory.txt
            # echo "your-instance-name ansible_host=$EC2_PUBLIC_IP ansible_user=ubuntu" >> .circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
            # Persist the modified inventory file to the workspace
            # cp .circleci/ansible/inventory.txt $HOME/workspace/inventory.txt
            # # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
     - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - '05:23:de:9b:17:72:1e:9b:cf:0b:47:e5:fd:17:ff:15'
      - attach_workspace:
          at: ~/
      - run:
          name: "Install-dependencies"
          command: |
            apk add openssh-client
            apk add --update ansible
      - run:
          name: "Configure-server"
          command: |
            echo -e "NODE_ENV=development\nENVIRONMENT: development\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}\nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            cat backend/.env
            cat .circleci/ansible/inventory.txt

            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment                   
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
